import os
import sqlite3
import logging
from datetime import datetime
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.date import DateTrigger
from pytz import timezone
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    BotCommand,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

# –õ–æ–≥–∏
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
if not BOT_TOKEN or ADMIN_ID == 0:
    logger.error("–ù–µ –∑–∞–¥–∞–Ω—ã BOT_TOKEN –∏–ª–∏ ADMIN_ID!")
    exit(1)

TZ = timezone("Europe/Amsterdam")
DB_PATH = "bot_db.sqlite"

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î ---
def init_db():
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    cur.execute("""
        CREATE TABLE IF NOT EXISTS subscribers (
            user_id INTEGER PRIMARY KEY
        );
    """)
    # –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    cur.execute("""
        CREATE TABLE IF NOT EXISTS reminders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            remind_time TEXT NOT NULL,
            text TEXT NOT NULL
        );
    """)
    conn.commit()
    conn.close()

def add_subscriber(user_id: int):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("INSERT OR IGNORE INTO subscribers(user_id) VALUES (?);", (user_id,))
    conn.commit()
    conn.close()

def get_all_subscribers():
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("SELECT user_id FROM subscribers;")
    rows = cur.fetchall()
    conn.close()
    return [row[0] for row in rows]

def add_reminder(user_id: int, remind_time: datetime, text: str):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute(
        "INSERT INTO reminders(user_id, remind_time, text) VALUES (?, ?, ?);",
        (user_id, remind_time.isoformat(), text),
    )
    reminder_id = cur.lastrowid
    conn.commit()
    conn.close()
    return reminder_id

def get_user_reminders(user_id: int):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute(
        "SELECT id, remind_time, text FROM reminders WHERE user_id = ? ORDER BY remind_time;",
        (user_id,),
    )
    rows = cur.fetchall()
    conn.close()
    return rows

def delete_reminder(reminder_id: int):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("DELETE FROM reminders WHERE id = ?;", (reminder_id,))
    conn.commit()
    conn.close()

# --- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ---
scheduler = BackgroundScheduler(timezone=TZ)

def schedule_reminder(app, reminder_id, user_id, remind_time: datetime, text: str):
    def job():
        try:
            app.bot.send_message(chat_id=user_id, text=f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {reminder_id}: {e}")
        # –ø–æ—Å–ª–µ –æ—Ç—Ä–∞–±–æ—Ç–∫–∏ ‚Äî —É–¥–∞–ª—è–µ–º –∏–∑ –ë–î
        delete_reminder(reminder_id)

    trigger = DateTrigger(run_date=remind_time, timezone=TZ)
    scheduler.add_job(job, trigger=trigger, id=f"reminder_{reminder_id}")

def load_and_schedule_all(app):
    for rid, rt_iso, text in sqlite3.connect(DB_PATH).cursor().execute(
        "SELECT id, remind_time, text, user_id FROM reminders"
    ):
        rt = datetime.fromisoformat(rt_iso)
        if rt > datetime.now(TZ):
            schedule_reminder(app, rid, user_id, rt, text)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫ ---
# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu_keyboard():
    buttons = [
        [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="menu_add")],
        [InlineKeyboardButton("üìã –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="menu_list")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="menu_about")],
    ]
    return InlineKeyboardMarkup(buttons)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    add_subscriber(user_id)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞.\n–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ ¬´–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!¬ª –≤ 08:00.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
        reply_markup=main_menu_keyboard()
    )

async def about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "<b>–ë–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞</b>\n\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ ¬´–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!¬ª –≤ 08:00\n"
        "‚Ä¢ –ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ –ª—é–±—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è\n"
        "‚Ä¢ –£–≤–µ–¥–æ–º–ª—è–µ—Ç –≤–∞—Å –ª–∏—á–Ω–æ, –∫–æ–≥–¥–∞ –ø—Ä–∏–¥—ë—Ç –≤—Ä–µ–º—è\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –º–µ–Ω—é –±–æ—Ç–∞\n"
        "/remind YYYY-MM-DD HH:MM —Ç–µ–∫—Å—Ç ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
        "/list ‚Äî —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"
        "/cancel ID ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
    )
    # –µ—Å–ª–∏ –∏–∑ –∫–Ω–æ–ø–∫–∏
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(text, parse_mode="HTML", reply_markup=main_menu_keyboard())
    else:
        await update.message.reply_text(text, parse_mode="HTML", reply_markup=main_menu_keyboard())

async def remind_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: /remind 2025-04-30 14:30 –ü–æ–∑–≤–æ–Ω–∏—Ç—å –≤—Ä–∞—á—É
    """
    user_id = update.effective_user.id
    try:
        date_str = context.args[0]
        time_str = context.args[1]
        text = " ".join(context.args[2:])
        remind_dt = TZ.localize(datetime.fromisoformat(f"{date_str}T{time_str}"))
        if remind_dt <= datetime.now(TZ):
            raise ValueError("–£–∫–∞–∑–∞–Ω–æ –≤—Ä–µ–º—è –≤ –ø—Ä–æ—à–ª–æ–º")
    except Exception:
        return await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "/remind YYYY-MM-DD HH:MM —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"
        )

    rid = add_reminder(user_id, remind_dt, text)
    schedule_reminder(context.application, rid, user_id, remind_dt, text)
    await update.message.reply_text(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #{rid} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {remind_dt.strftime('%Y-%m-%d %H:%M')}.")

async def list_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    reminders = get_user_reminders(user_id)
    if not reminders:
        return await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
    lines = [f"{rid}. {datetime.fromisoformat(rt).strftime('%Y-%m-%d %H:%M')} ‚Äî {txt}"
             for rid, rt, txt in reminders]
    await update.message.reply_text("–í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n" + "\n".join(lines))

async def cancel_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        rid = int(context.args[0])
        delete_reminder(rid)
        # —É–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
        job_id = f"reminder_{rid}"
        if scheduler.get_job(job_id):
            scheduler.remove_job(job_id)
        await update.message.reply_text(f"‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #{rid} –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    except Exception:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /cancel <ID_–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è>")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    if data == "menu_add":
        await query.answer()
        await query.edit_message_text(
            "–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            "/remind YYYY-MM-DD HH:MM —Ç–µ–∫—Å—Ç",
            reply_markup=main_menu_keyboard()
        )
    elif data == "menu_list":
        await query.answer()
        # –∏–º–∏—Ç–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ /list
        await list_command(update, context)
    elif data == "menu_about":
        await about(update, context)

async def forward_to_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    message = update.message

    if message.text:
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:\n\n{message.text}"
        )
    elif message.photo:
        photo_file_id = message.photo[-1].file_id
        await context.bot.send_photo(
            chat_id=ADMIN_ID,
            photo=photo_file_id,
            caption=f"–§–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
        )
    elif message.document:
        await context.bot.send_document(
            chat_id=ADMIN_ID,
            document=message.document.file_id,
            caption=f"–§–∞–π–ª –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
        )
    else:
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: [–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è]"
        )

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ ¬´–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!¬ª –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
def schedule_jobs(app):
    # –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π ¬´–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!¬ª
    from apscheduler.triggers.cron import CronTrigger
    def job_all():
        for uid in get_all_subscribers():
            try:
                app.bot.send_message(chat_id=uid, text="–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! ‚òÄÔ∏è")
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ {uid}: {e}")

    cron = CronTrigger(hour=8, minute=0, timezone=TZ)
    scheduler.add_job(job_all, trigger=cron, id="daily_good_morning")
    # –∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö
    load_and_schedule_all(app)

    scheduler.start()
    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω.")

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
def main():
    init_db()
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –≤ Telegram-–∫–ª–∏–µ–Ω—Ç–µ
    app.bot.set_my_commands([
        BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ / –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é"),
        BotCommand("remind", "–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: /remind YYYY-MM-DD HH:MM —Ç–µ–∫—Å—Ç"),
        BotCommand("list", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"),
        BotCommand("cancel", "–û—Ç–º–µ–Ω–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ ID"),
        BotCommand("about", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"),
    ])

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("about", about))
    app.add_handler(CommandHandler("remind", remind_command))
    app.add_handler(CommandHandler("list", list_command))
    app.add_handler(CommandHandler("cancel", cancel_command))

    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.ALL, forward_to_admin))

    schedule_jobs(app)

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()

if __name__ == "__main__":
    main()
